using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Security.Cryptography;

namespace Instruments
{
    

    public class Encryptor
    {
        // Encrypt a byte array into a byte array using a key and an IV 
        /// <summary>
        /// Шифрование byte массива, использую ключ и инициализирующий вектор(IV)
        /// </summary>
        /// <param name="clearData">Исходные данные</param>
        /// <param name="Key">Ключ</param>
        /// <param name="IV">Инициализирующий вектор</param>
        /// <returns>Зашифрованные данные</returns>
        public static byte[] Encrypt(byte[] clearData, byte[] Key, byte[] IV)
        {
            // Create a MemoryStream to accept the encrypted bytes 
            MemoryStream ms = new MemoryStream();

            // Create a symmetric algorithm. 
           
            Rijndael alg = Rijndael.Create();

            // We need the IV (Initialization Vector) because
            // the algorithm is operating in its default 
            // mode called CBC (Cipher Block Chaining).
            // The IV is XORed with the first block (8 byte) 
            // of the data before it is encrypted, and then each
            // encrypted block is XORed with the 
            // following block of plaintext.

            //alg.Key = Key;
            //alg.IV = IV;
            //alg.BlockSize = 256;
            //alg.KeySize = 256;
            //// Create a CryptoStream through which we are going to be
            //// pumping our data. 
            //CryptoStream cs = new CryptoStream(ms,
            //   alg.CreateEncryptor(), CryptoStreamMode.Write);

            //// Write the data and make it do the encryption 
            //cs.Write(clearData, 0, clearData.Length);

            //cs.Close();
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;
                aesAlg.Mode = CipherMode.CBC;
                using (CryptoStream cs = new CryptoStream(ms,
                    aesAlg.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearData, 0, clearData.Length);
                }
            }

            // Now get the encrypted data from the MemoryStream.
            byte[] encryptedData = ms.ToArray();
            return encryptedData;
        }


        /// <summary>
        /// Шифрование byte-массива, с использованием пароля
        /// </summary>
        /// <param name="clearData">Исходные данные</param>
        /// <param name="Password">Пароль</param>
        /// <returns>Зашифрованные данные</returns>
        public static byte[] Encrypt(byte[] clearData, string Password)
        {
            //Получение ключа и инициализирующего вектора из пароля
            PasswordDeriveBytes pdb = new PasswordDeriveBytes(Password,
                new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 
            0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
            return Encrypt(clearData, pdb.GetBytes(32), pdb.GetBytes(16));

        }

       

        // Decrypt a byte array into a byte array using a key and an IV 
        /// <summary>
        /// Разшифрование byte массива, использую ключ и инициализирующий вектор(IV)
        /// </summary>
        /// <param name="clearData">Шифрованные данные</param>
        /// <param name="Key">Ключ</param>
        /// <param name="IV">Инициализирующий вектор</param>
        /// <returns>Исходные данные</returns>
        public static byte[] Decrypt(byte[] cipherData,
                                    byte[] Key, byte[] IV)
        {
            // Create a MemoryStream that is going to accept the
            // decrypted bytes 
            MemoryStream ms = new MemoryStream();
            // Create a symmetric algorithm. 
            
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;
                aesAlg.Mode = CipherMode.CBC;
                using (CryptoStream cs = new CryptoStream(ms,
                    aesAlg.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherData, 0, cipherData.Length);
                }
            }

            // Now get the decrypted data from the MemoryStream. 
            byte[] decryptedData = ms.ToArray();
            return decryptedData;
        }

        /// <summary>
        /// Разшифрование byte-массива, с использованием пароля
        /// </summary>
        /// <param name="clearData">Шифрованые данные</param>
        /// <param name="Password">Пароль</param>
        /// <returns>Исходные данные</returns>
        public static byte[] Decrypt(byte[] cipherData, string Password)
        {
            // We need to turn the password into Key and IV. 
            PasswordDeriveBytes pdb = new PasswordDeriveBytes(Password,
                new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 
            0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});

            return Decrypt(cipherData, pdb.GetBytes(32), pdb.GetBytes(16));
        }

       
    }
}
