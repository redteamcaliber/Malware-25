using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Instruments
{
    public class Finder
    {
        //Расширения файлов для поиска
        private static String[] allowedExt = { ".doc", ".docx", 
                                      ".xls",".xlsx",
                                      ".ppt",".pptx",".accdb"
                                    };


        /// <summary>
        /// Поиск всех файлов в данной папке, с данными расширениями
        /// </summary>
        /// <param name="path">Путь папки</param>
        /// <param name="allowedExt">Расширения файлов</param>
        /// <returns>Список путей файлов с данным расширением</returns>
        private static List<String> FindAllFilesInDirectory(String path, String[] allowedExt)
        {
            List<String> filesPaths = new List<string>();

            foreach (var ext in allowedExt)
            {
                try
                {
                    String[] files = Directory.GetFiles(path, "*" + ext);
                    foreach (var file in files)
                    {
                        filesPaths.Add(file);
                    }
                }
                catch { }
            }
            return filesPaths;
        }
        /// <summary>
        /// Поиск всех файлов в заданной папке, включая подпапки
        /// </summary>
        /// <param name="directory">Путь папки</param>
        /// <param name="allowedExt">Расширения файлов</param>
        /// <returns>Список путей файлов с данным расширением</returns>
        private static List<String> AddAllFiles(String directory, String [] allowedExt)
        {
            List<String> filesPaths = new List<string>();
            try
            {
                String[] dirs = Directory.GetDirectories(directory);
                foreach (var dir in dirs)
                {
                    filesPaths.AddRange(FindAllFilesInDirectory(dir, allowedExt));
                    filesPaths.AddRange(AddAllFiles(dir, allowedExt));
                }
            }
            catch { }
            return filesPaths;
        }
        /// <summary>
        /// Поиск всех файлов с данными расширениями, на всех подключенных устройствах
        /// </summary>
        /// <param name="allowedExt">Расширения файлов</param>
        /// <returns>Список путей файлов с данным расширением</returns>
        public static List<String> Find(String [] allowedExt)
        {
            List<String> filesPaths = new List<string>();
            DriveInfo[] drives = DriveInfo.GetDrives();
            foreach (var drive in drives)
            {
                String str = drive.Name;
                if (drive.Name == "C:\\") 
                {
                    str += "Users\\";
                }
                filesPaths.AddRange(AddAllFiles(str, allowedExt));
            }
            filesPaths.ForEach(s => Console.WriteLine(s));
            return filesPaths;
        }

        /// <summary>
        /// Поиск всех офисных файлов
        /// </summary>
        /// <returns>Список путей файлов с расширениями MS Office (наиболее популярных)</returns>
        public static List<String> FindDocs()
        {
            return Find(allowedExt);
        }
        /// <summary>
        /// Поиск замененных офисных файлов (*.ext.exe , где ext - расширение файлов MS Office)
        /// </summary>
        /// <returns>Список путей замененных файлов </returns>
        public static List<String> FindExes()
        {
            List<String> allExt = new List<string>();
            foreach (var ext in allowedExt)
            {
                allExt.Add(ext + ".exe");
            }
            return Find(allExt.ToArray());
        }

    }
}
